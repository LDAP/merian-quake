#version 460
#extension GL_GOOGLE_include_directive : enable

#include "layout.glsl"
#include "../raytrace.glsl"
#include "restir_di.glsl"
#include "restir_di_common.glsl"

#include "merian-shaders/hash.glsl"
#include "merian-shaders/random.glsl"
#include "merian-shaders/bsdf_diffuse.glsl"
#include "merian-shaders/bsdf_microfacet.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/color/colors_yuv.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/reprojection.glsl"

#define pixel ivec2(gl_GlobalInvocationID)
#define resolution ivec2(imageSize(img_irradiance))
#define center_surface hits[gbuffer_index(pixel, resolution)]
#define surface_at(pixel) hits[gbuffer_index(pixel, resolution)]
#define read_reservoir(pixel) reservoirs_spatial_read[gbuffer_index((pixel), resolution)]
#define write_reservoir reservoirs[gbuffer_index((pixel), resolution)]
#define gbuf(pixel) gbuffer[gbuffer_index((pixel), resolution)]

void main() {
    if (any(greaterThanEqual(pixel, resolution))) {
        return;
    }

    uint rng_state = pcg4d16(uvec4(pixel, params.frame * 4 + 2, SEED));

    ReSTIRDIReservoir reservoir = restir_di_reservoir_init();
    const ReSTIRDIReservoir current_reservoir = read_reservoir(pixel);
    restir_di_reservoir_combine_finalized(reservoir, rng_state,
                                          current_reservoir,
                                          current_reservoir.p_target
                                          );

    const ivec2 neighbor = ivec2(round(pixel + SPATIAL_RADIUS * (2 * XorShift32Vec2(rng_state) - 1)));

    if (all(lessThan(neighbor, resolution)) && all(greaterThanEqual(neighbor, ivec2(0)))
        && reprojection_valid(geo_decode_normal(gbuf(pixel).enc_normal), geo_decode_normal(gbuf(neighbor).enc_normal), SPATIAL_NORMAL_REJECT_COS,
                          gbuf(pixel).linear_z,  gbuf(pixel).vel_z, gbuf(neighbor).linear_z, SPATIAL_DEPTH_REJECT)) {

        ReSTIRDIReservoir neighbor_reservoir = read_reservoir(neighbor);

        if (SPATIAL_CLAMP_M > 0) {
            neighbor_reservoir.M = min(neighbor_reservoir.M, SPATIAL_CLAMP_M);
        }

        bool selected_neighbor = restir_di_reservoir_combine_finalized(
            reservoir,
            rng_state,
            neighbor_reservoir,
            restir_di_target_pdf(neighbor_reservoir.y, center_surface)
        );
    

        if (SPATIAL_BIAS_CORRECTION == 0 /*NONE*/) {
            restir_di_reservoir_finalize(reservoir);
        } else if (SPATIAL_BIAS_CORRECTION >= 1 /*BASIC or RAYTRACED or RAYTRACED_PREV_BVH*/) {
            // called RTXDI_BIAS_CORRECTION_BASIC in rtxdi-runtime / RESTIR DI implementation
            float pi = reservoir.p_target;
            float pi_sum = reservoir.p_target * current_reservoir.M;
            float spatial_p = restir_di_target_pdf(reservoir.y, surface_at(neighbor));

            if (spatial_p > 0) {
                // do this only if really necessary...
                if (SPATIAL_BIAS_CORRECTION == 2 /*RAYTRACED*/) {
                    if (!trace_visibility(surface_at(neighbor).pos, reservoir.y.pos)) {
                        spatial_p = 0;
                    }
                }
            }

            pi = selected_neighbor ? spatial_p : pi;
            pi_sum += spatial_p * neighbor_reservoir.M;

            restir_di_reservoir_finalize_custom(reservoir, pi, pi_sum);
        }
    } else {
        // no bias correction necessary
        restir_di_reservoir_finalize(reservoir);
    }

    write_reservoir = reservoir;
}
