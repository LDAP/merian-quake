#version 460
#extension GL_GOOGLE_include_directive : enable

#include "layout.glsl"
#include "../raytrace.glsl"
#include "restir_di.glsl"
#include "restir_di_common.glsl"

#include "merian-shaders/hash.glsl"
#include "merian-shaders/random.glsl"
#include "merian-shaders/bsdf_diffuse.glsl"
#include "merian-shaders/bsdf_microfacet.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/color/colors_yuv.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/reprojection.glsl"

#define pixel ivec2(gl_GlobalInvocationID)
#define resolution ivec2(imageSize(img_irradiance))
#define center_surface hits[image_to_buffer_index(pixel, resolution)]
#define surface_at(pixel) hits[image_to_buffer_index(pixel, resolution)]
#define read_reservoir(pixel) reservoirs_spatial_read[image_to_buffer_index((pixel), resolution)]
#define write_reservoir reservoirs[image_to_buffer_index((pixel), resolution)]
#define gbuf(pixel) gbuffer[image_to_buffer_index((pixel), resolution)]

void main() {
    if (any(greaterThanEqual(pixel, resolution))) {
        return;
    }

    uint rng_state = pcg4d16(uvec4(pixel, params.frame * 4 + 2, SEED));

    ReSTIRDIReservoir reservoir = restir_di_reservoir_init();
    const ReSTIRDIReservoir current_reservoir = read_reservoir(pixel);
    restir_di_reservoir_combine_finalized(reservoir, rng_state,
                                          current_reservoir,
                                          current_reservoir.p_target
                                          );

    int selected = -1;
    ivec2 neighbors[SPATIAL_REUSE_ITERATIONS];

    for (int i = 0; i < SPATIAL_REUSE_ITERATIONS; i++) {
        neighbors[i] = ivec2(round(pixel + SPATIAL_RADIUS * (2 * XorShift32Vec2(rng_state) - 1)));

        if (any(greaterThanEqual(neighbors[i], resolution)) ||
            any(lessThan(neighbors[i], ivec2(0))) ||
            !reprojection_valid(geo_decode_normal(gbuf(pixel).enc_normal), geo_decode_normal(gbuf(neighbors[i]).enc_normal), SPATIAL_NORMAL_REJECT_COS,
                          gbuf(pixel).linear_z,  gbuf(pixel).vel_z, gbuf(neighbors[i]).linear_z, SPATIAL_DEPTH_REJECT)
            ) {
            neighbors[i].x = -1;
            continue;
        }

        ReSTIRDIReservoir neighbor_reservoir = read_reservoir(neighbors[i]);

        const bool selected_neighbor = restir_di_reservoir_combine_finalized(
            reservoir,
            rng_state,
            neighbor_reservoir,
            restir_di_target_pdf(neighbor_reservoir.y, center_surface)
        );

        if (selected_neighbor) {
            selected = i;
        }
    }

    

    if (SPATIAL_BIAS_CORRECTION == 0 /*NONE*/) {
        // no bias correction necessary
        restir_di_reservoir_finalize(reservoir);
    } else {
        // => SPATIAL_BIAS_CORRECTION >= 1 meaning BASIC or RAYTRACED
        float pi = reservoir.p_target;
        float pi_sum = reservoir.p_target * current_reservoir.M;

        for (int i = 0; i < SPATIAL_REUSE_ITERATIONS; i++) {
            if (neighbors[i].x == -1) {
                continue;
            }

            float spatial_p = restir_di_target_pdf(reservoir.y, surface_at(neighbors[i]));

            if (SPATIAL_BIAS_CORRECTION == 2 /*RAYTRACED*/ && spatial_p > 0) {
                // do this only if really necessary...
                if (!trace_visibility(surface_at(neighbors[i]).pos, reservoir.y.pos)) {
                    spatial_p = 0;
                }
            }

            pi = selected == i ? spatial_p : pi;
            pi_sum += spatial_p * read_reservoir(neighbors[i]).M;
        }

        restir_di_reservoir_finalize_custom(reservoir, pi, pi_sum);
    }

    write_reservoir = reservoir;
}
