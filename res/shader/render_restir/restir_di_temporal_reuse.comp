#version 460
#extension GL_GOOGLE_include_directive          : enable
#extension GL_KHR_shader_subgroup_basic         : enable
#extension GL_KHR_shader_subgroup_arithmetic    : enable
#extension GL_KHR_shader_subgroup_ballot        : enable

#include "layout.glsl"
#include "../raytrace.glsl"
#include "restir_di.glsl"
#include "restir_di_common.glsl"

#include "merian-shaders/hash.glsl"
#include "merian-shaders/random.glsl"
#include "merian-shaders/bsdf_diffuse.glsl"
#include "merian-shaders/bsdf_microfacet.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/color/colors_yuv.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/reprojection.glsl"

#define pixel ivec2(gl_GlobalInvocationID)
#define resolution ivec2(imageSize(img_irradiance))
#define center_surface hits[gbuffer_index(pixel, resolution)]
#define surface_at(pixel) hits[gbuffer_index(pixel, resolution)]
#define read_reservoir(pixel) reservoirs[gbuffer_index((pixel), resolution)]
#define read_prev_reservoir(pixel) reservoirs_prev_read[gbuffer_index((pixel), resolution)]
#define write_reservoir reservoirs[gbuffer_index((pixel), resolution)]
#define gbuf(pixel) gbuffer[gbuffer_index((pixel), resolution)]
#define prev_gbuf(pixel) prev_gbuffer[gbuffer_index((pixel), resolution)]

// for boiling filter
#define SUBGROUP_COUNT ((gl_WorkGroupSize.x * gl_WorkGroupSize.y + SUBGROUP_SIZE - 1) / SUBGROUP_SIZE)

shared float subgroup_sums[SUBGROUP_COUNT];
shared uint subgroup_counts[SUBGROUP_COUNT];

void boiling_filter(inout ReSTIRDIReservoir reservoir) {
    const float boiling_filter_multiplier = 10.f / BOILING_FILTER_STRENGTH - 9.f;
    const float subgroup_sum = subgroupAdd(reservoir.w_sum_or_W);
    const uint subgroup_count = subgroupBallotBitCount(subgroupBallot(reservoir.w_sum_or_W > 0));

    if (subgroupElect()) {
        subgroup_sums[gl_SubgroupID] = subgroup_sum;
        subgroup_counts[gl_SubgroupID] = subgroup_count;
    }

    barrier();
    memoryBarrier();

    if (gl_LocalInvocationIndex == 0) {
        float sum = 0.0;
        uint count = 0;

        for (int i = 0; i < gl_NumSubgroups; i++) {
            sum += subgroup_sums[i];
            count += subgroup_counts[i];
        }

        subgroup_sums[0] = count > 0 ? sum / float(count) : 0;
    }

    barrier();
    memoryBarrier();

    if (reservoir.w_sum_or_W > subgroup_sums[0] * boiling_filter_multiplier) {
        restir_di_reservoir_discard(reservoir);
    }
}

void main() {
    if (any(greaterThanEqual(pixel, resolution))) {
        return;
    }

    uint rng_state = pcg4d16(uvec4(pixel, params.frame * 4 + 1, SEED));

    ReSTIRDIReservoir reservoir = restir_di_reservoir_init();
    const ReSTIRDIReservoir current_reservoir = read_reservoir(pixel);
    restir_di_reservoir_combine_finalized(reservoir, rng_state, current_reservoir, current_reservoir.p_target);

    const ivec2 prev_pixel = ivec2(round(pixel + texelFetch(img_mv, pixel, 0).rg));

    if (any(greaterThanEqual(prev_pixel, resolution)) || any(lessThan(prev_pixel, ivec2(0)))) {
        return;
    }

    if (!reprojection_valid(geo_decode_normal(gbuf(pixel).enc_normal), geo_decode_normal(prev_gbuf(prev_pixel).enc_normal), TEMPORAL_NORMAL_REJECT_COS,
                          gbuf(pixel).linear_z,  gbuf(pixel).vel_z, prev_gbuf(prev_pixel).linear_z, TEMPORAL_DEPTH_REJECT)) {
        return;
    }

    ReSTIRDIReservoir prev_reservoir = read_prev_reservoir(prev_pixel);

    if (TEMPORAL_CLAMP_M > 0) {
        prev_reservoir.M = min(prev_reservoir.M, TEMPORAL_CLAMP_M);
    }

    const bool selected_prev = restir_di_reservoir_combine_finalized(
        reservoir,
        rng_state,
        prev_reservoir,
        restir_di_target_pdf(prev_reservoir.y, center_surface)
    );

    if (TEMPORAL_BIAS_CORRECTION == 0 /*NONE*/) {
        restir_di_reservoir_finalize(reservoir);
    } else if (TEMPORAL_BIAS_CORRECTION >= 1 /*BASIC or RAYTRACED or RAYTRACED_PREV_BVH*/) {
        // called RTXDI_BIAS_CORRECTION_BASIC in rtxdi-runtime / RESTIR DI implementation
        float pi = reservoir.p_target;
        float pi_sum = reservoir.p_target * current_reservoir.M;
        float temporal_p = restir_di_target_pdf(reservoir.y, surface_at(prev_pixel));

        if (temporal_p > 0) {
            // do this only if really necessary...
            if (TEMPORAL_BIAS_CORRECTION == 2 /*RAYTRACED*/) {
                if (!trace_visibility(center_surface.pos, reservoir.y.pos)) {
                    temporal_p = 0;
                }
            }

            if (TEMPORAL_BIAS_CORRECTION == 3 /*RAYTRACED_PREV_BVH*/) {
                // if (!trace_visibility(prev_tlas, surface_at(prev_pixel).pos, reservoir.y.pos)) {
                //     temporal_p = 0;
                // }
                
                temporal_p = 0; // prev bvh currently unsupported...
            }
        }

        pi = selected_prev ? temporal_p : pi;
        pi_sum += temporal_p * prev_reservoir.M;

        restir_di_reservoir_finalize_custom(reservoir, pi, pi_sum);
    }

    if (BOILING_FILTER_STRENGTH > 1e-6) {
        boiling_filter(reservoir);
    }

    write_reservoir = reservoir;
}
