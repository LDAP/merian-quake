#version 460
#extension GL_GOOGLE_include_directive              : enable
#extension GL_EXT_ray_tracing                       : enable
#extension GL_EXT_ray_query                         : enable
#extension GL_EXT_ray_tracing_position_fetch        : enable
#extension GL_EXT_shader_explicit_arithmetic_types  : enable
#extension GL_EXT_nonuniform_qualifier              : enable
#extension GL_EXT_control_flow_attributes           : enable
#extension GL_KHR_shader_subgroup_ballot            : enable
#extension GL_KHR_shader_subgroup_arithmetic        : enable

#include "merian-shaders/camera.glsl"
#include "merian-shaders/random.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/raytrace.glsl"
#include "merian-shaders/phase_isotropic.glsl"
#include "merian-shaders/grid.glsl"
#include "merian-shaders/color/colors_yuv.glsl"
#include "merian-shaders/hash.glsl"
#include "merian-shaders/phase_draine.glsl"
#include "merian-shaders/transmittance.glsl"

uint rng_state;
vec3 irr;
vec2 moments;

#include "../config.h"
#include "layout.glsl"
#include "light_cache.glsl"
#include "mc.glsl"
#include "mc_distance.glsl"
#include "../raytrace.glsl"

void main() {
    const ivec2 pixel = ivec2(gl_GlobalInvocationID);
    const ivec2 resolution = ivec2(imageSize(img_irradiance));

    if (any(greaterThan(pixel, resolution))) {
        return;
    }

    const uint grid_max_x = resolution.x / DISTANCE_MC_GRID_WIDTH + 1;

    // must equal quake.comp
    rng_state = pcg4d16(uvec4(pixel, params.frame, SEED));
    irr = vec3(0);
    moments = vec2(0);

    const float linear_z = gbuffer_get_linear_z_pixel(gbuffer, pixel);
    const vec3 first_n = gbuffer_get_normal_pixel(gbuffer, pixel);
    const vec3 first_wi = get_camera_ray_dir(pixel /*+ pixel_offset_blackman_harris(XorShift32Vec2(rng_state))*/, resolution, params.cam_u.xyz, params.cam_w.xyz, FOV_TAN_ALPHA_HALF);
    const vec2 mv = imageLoad(img_volume_mv, pixel).rg;

    for (int s = 0; s < VOLUME_SPP; s++) {
        float p = 0.0;
        float t;

        // CAMERA-DISTANCE SAMPLING
        DistanceMCState dist_mc_state = distance_mc_state_new();
        float dist_score_sum = 0.0;
        {
            const float xi_max = transmittance_xi_max(min(linear_z, VOLUME_MAX_T), MU_T);

            float scores[DISTANCE_MC_SAMPLES];
            vec2 normal_dists[DISTANCE_MC_SAMPLES];

            [[unroll]]
            for (int i = 0; i < DISTANCE_MC_SAMPLES; i++) {
                DistanceMCState state;
                if (s == 0) {
                    // access using motion vector
                    distance_mc_load(state, clamp(pixel + mv, vec2(0), imageSize(img_volume_mv) - 1), grid_max_x);
                    // correct distance with camera velocity
                    normal_dists[i] = distance_mc_state_get_normal_dist(state);
                    normal_dists[i].x -= dot(params.cam_x.xyz - params.prev_cam_x.xyz, first_wi);
                } else {
                    distance_mc_load(state, pixel, grid_max_x);
                    normal_dists[i] = distance_mc_state_get_normal_dist(state);
                }

                scores[i] = state.sum_w * float(normal_dists[i].x < linear_z);
                dist_score_sum += scores[i];
                if (XorShift32(rng_state) < scores[i] / dist_score_sum) {
                    // we use here that comparison with NaN is false, that happens if candidate_score == 0 and sum == 0; 
                    dist_mc_state = state;
                    t = sample_normal_box_muller(normal_dists[i].x, normal_dists[i].y, XorShift32Vec2(rng_state)).x;
                }
            }

            if (DIST_GUIDE_P < XorShift32(rng_state) || dist_score_sum == 0) {
                t = transmittance_sample2(MU_T, XorShift32(rng_state), xi_max);
            } else if (t >= min(linear_z, VOLUME_MAX_T) || t <= 0) {
                continue; // TODO: Use transmittance sampling then
            }

            [[unroll]]
            for (int i = 0; i < DISTANCE_MC_SAMPLES; i++) {
                p += (scores[i] > 0 ? scores[i] * sample_normal_pdf(normal_dists[i].x, normal_dists[i].y, t) / dist_score_sum : 0);
            }
            p = (dist_score_sum > 0 ? (1.0 - DIST_GUIDE_P) : 1.0) * transmittance_pdf2(t, MU_T, xi_max) + DIST_GUIDE_P * p;
        }

        // must equal first hit in quake.comp (make sure random state is the same)
        Hit current_hit;
        current_hit.wi = first_wi;
        current_hit.pos = params.cam_x.xyz + t * current_hit.wi;
        // Adaptive MC grid for surfaces is normal-biased currently. We use the gbuffer normal here. 
        current_hit.normal = first_n;
        
        vec3 wo;
        float wo_p = 0;
        MCState mc_state;
        uint mc_buffer_index;
        float score_sum = 0;

        // SAMPLE OUTGOING DIRECTION
        {
            float scores[MC_SAMPLES];
            vec4 vmfs[MC_SAMPLES];
            // SAMPLE NEXT OUTGOING DIRECTION
            {
                [[unroll]]
                for (int i = 0; i < MC_SAMPLES; i++) {
                    const bool adaptive_grid = XorShift32(rng_state) < MC_SAMPLES_ADAPTIVE_PROB;

                    uint buffer_index, hash;
                    if (adaptive_grid) {
                        mc_adaptive_buffer_index(current_hit.pos, -first_wi, buffer_index, hash);
                    } else {
                        mc_static_buffer_index(current_hit.pos, buffer_index, hash);
                    }

                    MCState state = mc_states[buffer_index];

                    if (adaptive_grid) {
                        mc_adaptive_finalize_load(state, hash);
                    } else {
                        mc_static_finalize_load(state, hash);
                    }

                    scores[i] = state.sum_w;
                    score_sum += state.sum_w;
                    vmfs[i] = mc_state_get_vmf(state, current_hit.pos);
                    if (XorShift32(rng_state) < scores[i] / score_sum) {
                        // we use here that comparison with NaN is false, that happens if candidate_score == 0 and sum == 0; 
                        mc_state = state;
                        mc_buffer_index = buffer_index;
                        wo = vmf_sample(vmfs[i].xyz, vmfs[i].w, XorShift32Vec2(rng_state));
                    }
                }

                if (score_sum == 0 || XorShift32(rng_state) < VOLUME_PHASE_P) {
                    wo = phase_draine_sample(XorShift32Vec2(rng_state), first_wi, DRAINE_G, DRAINE_A);
                    mc_state = mc_state_new();
                }
                
                // Multiple importance sampling
                [[unroll]]
                for (int i = 0; i < MC_SAMPLES; i++) {
                    // score_sum > 0 ? results in black artifacts
                    wo_p += (scores[i] > 0 ? scores[i] * (vmf_pdf(wo, vmfs[i].xyz, vmfs[i].w)) / score_sum : 0);
                }
                wo_p = (score_sum > 0 ? VOLUME_PHASE_P : 1.0) * phase_draine_eval(dot(first_wi, wo), DRAINE_G, DRAINE_A) + (1 - VOLUME_PHASE_P) * wo_p;
            }
        }

        p *= wo_p;

        Hit next_hit;
        next_hit.wi = wo;
        next_hit.pos = current_hit.pos;
        f16vec3 incident = f16vec3(0);
        f16vec3 throughput = f16vec3(1);
        trace_ray(throughput, incident, next_hit);

#if VOLUME_USE_LIGHT_CACHE == 1
            if (!any(greaterThan(incident, f16vec3(0)))) {
                incident = throughput * light_cache_get(next_hit.pos, next_hit.normal).rgb;
            }
#endif

        const float phase = phase_draine_eval(dot(first_wi, wo), DRAINE_G, DRAINE_A);
        const vec3 contrib = incident * phase * MU_S * transmittance3(t, MU_T, VOLUME_MAX_T) / p;
        if (!any(isnan(contrib)) && !any(isinf(contrib))) {
            irr += contrib;
            const float l = yuv_luminance(contrib);
            moments += vec2(l, l * l);
            
            // UPDATE MC FOR CAMERA DISTANCE
            distance_mc_state_add_sample(dist_mc_state, t, l);
            if (s == VOLUME_SPP - 1) {
                // last sample
                float dist;
                if (dist_mc_state.sum_w > 0) {
                    dist = dist_mc_state.moments.x / dist_mc_state.sum_w;
                } else {
                    dist = linear_z;
                }
                imageStore(img_volume_depth, pixel, vec4(dist, 0, 0, 0));
            }
            if (XorShift32(rng_state) < l / (dist_score_sum / DISTANCE_MC_SAMPLES)) {
                distance_mc_save(dist_mc_state, pixel, grid_max_x);
            }

            // UPDATE MC FOR OUTGOING DIRECTIONS
            const float mc_f = yuv_luminance(phase * incident / wo_p);
            if (XorShift32(rng_state) < mc_f / (score_sum / MC_SAMPLES)) {
                const vec3 jittered_normal = make_frame(-first_wi) * sample_cos(XorShift32Vec2(rng_state));
                mc_state_add_sample(mc_state, current_hit.pos, mc_f, next_hit.pos, (next_hit.pos - next_hit.prev_pos) / TIME_DIFF);
                mc_static_save(mc_state, current_hit.pos, jittered_normal);
                mc_adaptive_save(mc_state, current_hit.pos, jittered_normal);
            } else if (MC_FAST_RECOVERY == 1 && mc_light_missing(mc_state, mc_f, wo, current_hit.pos)) {
                // fix slow recovery after light source disappears
                mc_states[mc_buffer_index].sum_w = 0;
            }
        }
    }
    
    // DistanceMCState s;
    // distance_mc_load(s, pixel, resolution);
    // imageStore(img_debug, pixel, vec4(1 / 1000. * distance_mc_state_get_normal_dist(s).y));

    imageStore(img_volume, pixel, vec4(irr / max(VOLUME_SPP, 1), max(VOLUME_SPP, 1)));
    imageStore(img_volume_moments, pixel, vec4(moments / max(VOLUME_SPP, 1), 0, 0));
    

}
