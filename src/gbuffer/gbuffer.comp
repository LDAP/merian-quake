#version 460
#extension GL_GOOGLE_include_directive  : enable
#extension GL_EXT_scalar_block_layout   : require
#extension GL_EXT_ray_tracing                       : enable
#extension GL_EXT_ray_query                         : enable
#extension GL_EXT_shader_explicit_arithmetic_types  : enable
#extension GL_EXT_nonuniform_qualifier              : enable

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

layout (constant_id = 2) const float FOV_TAN_ALPHA_HALF = 0;
layout (constant_id = 3) const float SUN_W_X = 0;
layout (constant_id = 4) const float SUN_W_Y = 0;
layout (constant_id = 5) const float SUN_W_Z = 0;
layout (constant_id = 6) const float SUN_COLOR_R = 0;
layout (constant_id = 7) const float SUN_COLOR_G = 0;
layout (constant_id = 8) const float SUN_COLOR_B = 0;
layout (constant_id = 9) const float VOLUME_MAX_T = 1000.;

#include "../config.h"
#include "../scene_info.glsl.h"
#include "../hit.glsl.h"

layout(push_constant) uniform PushConstant { 
    UniformData params;
};

// GRAPG INPUTS

layout(set = 0, binding = 0) uniform sampler2D img_tex[MAX_GLTEXTURES];

layout(set = 0, binding = 1, scalar) buffer readonly restrict buf_vtx_t {
    // vertex positons
    vec3 v[];
} buf_vtx[MAX_GEOMETRIES];

layout(set = 0, binding = 2, scalar) buffer readonly restrict buf_prev_vtx_t {
    // vertex positons
    vec3 v[];
} buf_prev_vtx[MAX_GEOMETRIES];

layout(set = 0, binding = 3, scalar) buffer readonly restrict buf_idx_t {
    // index data for every instance
    uvec3 i[];
} buf_idx[MAX_GEOMETRIES];

layout(set = 0, binding = 4, scalar) buffer readonly restrict buf_ext_t {
    // extra geo info
    VertexExtraData v[];
} buf_ext[MAX_GEOMETRIES];

layout(set = 0, binding = 5) uniform accelerationStructureEXT tlas;


// GRAPH OUTPUTS
layout(set = 0, binding = 6) uniform writeonly restrict image2D img_albedo;
layout(set = 0, binding = 7) uniform writeonly restrict image2D img_irradiance;
layout(set = 0, binding = 8) uniform writeonly restrict image2D img_mv;

layout(set = 0, binding = 9, scalar) buffer writeonly restrict buf_gbuf {
    GBuffer gbuffer[];
};
layout(set = 0, binding = 10, scalar) buffer writeonly restrict buf_hits {
    Hit hits[];
};

#include "../render_mc/raytrace.glsl"

#include "common/camera.glsl"

void main() {
    const ivec2 pixel = ivec2(gl_GlobalInvocationID);
    const ivec2 resolution = ivec2(imageSize(img_albedo));

    //rng_state = pcg4d16(uvec4(pixel, params.frame, SEED));
    //moments = vec2(0);
    //irr = vec3(0);

    Hit first_hit;
    {
        const vec2 jitter = vec2(0);/* pixel_offset_blackman_harris(XorShift32Vec2(rng_state))*/

        first_hit.wi = get_camera_ray_dir(pixel + jitter, resolution, params.cam_u.xyz, params.cam_w.xyz, FOV_TAN_ALPHA_HALF);
        first_hit.pos = params.cam_x.xyz;
        f16vec3 incident = f16vec3(0);
        f16vec3 camera_throughput = f16vec3(1);
        trace_ray(camera_throughput, incident, first_hit);
        // if (MAX_PATH_LENGTH > 0) {
        //     irr = incident / mix(f16vec3(1.), first_hit.albedo.rgb, greaterThan(first_hit.albedo.rgb, f16vec3(1e-4)));
        //     const float l = yuv_luminance(irr);
        //     moments = vec2(l, l * l);
        // }
        
        first_hit.albedo *= f16vec3(!any(greaterThanEqual(incident, f16vec3(1e-5)))) * camera_throughput;

        const float vel_z = distance(params.prev_cam_x.xyz, first_hit.prev_pos) - distance(params.cam_x.xyz, first_hit.pos);
        GBuffer gbuf = {geo_encode_normal(first_hit.normal), distance(params.cam_x.xyz, first_hit.pos), vec2(0), vel_z};

        // Calculate depth gradient
        const vec3 r_x = get_camera_ray_dir(pixel + ivec2(1, 0) + jitter, resolution, params.cam_u.xyz, params.cam_w.xyz, FOV_TAN_ALPHA_HALF);
        const vec3 r_y = get_camera_ray_dir(pixel + ivec2(0, 1) + jitter, resolution, params.cam_u.xyz, params.cam_w.xyz, FOV_TAN_ALPHA_HALF);
        // use geo normal?
        const vec3 geonormal = geo_decode_normal(first_hit.enc_geonormal);
        gbuf.grad_z = dot(geonormal, first_hit.pos - params.cam_x.xyz) / vec2(dot(geonormal, r_x), dot(geonormal, r_y)) - gbuf.linear_z;

        // Store motion vector
        const vec3 old_dir = first_hit.prev_pos - params.prev_cam_x.xyz;
        const vec2 old_pixel = get_camera_pixel(old_dir, resolution, params.prev_cam_u.xyz, params.prev_cam_w.xyz, FOV_TAN_ALPHA_HALF);
        
        if (all(lessThan(pixel, resolution))) {
            imageStore(img_mv, pixel, vec4(old_pixel - pixel, 0, 0));
            imageStore(img_albedo, pixel, vec4(first_hit.albedo, 1));
            imageStore(img_irradiance, pixel, vec4(incident, 1));
            gbuffer[gbuffer_index(pixel, resolution)] = gbuf;
            hits[gbuffer_index(pixel, resolution)] = first_hit;
        }
    }
}
