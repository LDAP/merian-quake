#version 460
#extension GL_GOOGLE_include_directive  : enable
#extension GL_EXT_scalar_block_layout   : require
#extension GL_EXT_ray_tracing                       : enable
#extension GL_EXT_ray_query                         : enable
#extension GL_EXT_shader_explicit_arithmetic_types  : enable
#extension GL_EXT_nonuniform_qualifier              : enable

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

#include "../config.h"
#include "../scene_info.glsl.h"
#include "../hit.glsl.h"

layout(set = 0, binding = 6) uniform writeonly restrict image2D img_albedo;
layout(set = 0, binding = 7) uniform writeonly restrict image2D img_irradiance;
layout(set = 0, binding = 8) uniform writeonly restrict image2D img_mv;

layout(set = 0, binding = 9, scalar) buffer writeonly restrict buf_gbuf {
    GBuffer gbuffer[];
};
layout(set = 0, binding = 10, scalar) buffer writeonly restrict buf_hits {
    Hit hits[];
};

void main() {
    const ivec2 pixel = ivec2(gl_GlobalInvocationID);
    const ivec2 resolution = ivec2(imageSize(img_albedo));

    if (any(greaterThanEqual(pixel, resolution))) {
        return;
    }

    imageStore(img_mv, pixel, vec4(0));
    imageStore(img_albedo, pixel, vec4(0));
    imageStore(img_irradiance, pixel, vec4(0));
    const GBuffer gbuf = {0, 0, vec2(0), 0};
    gbuffer[gbuffer_index(pixel, resolution)] = gbuf;

    return;
}
