#version 460
#extension GL_GOOGLE_include_directive              : enable
#extension GL_EXT_scalar_block_layout       : require
#include "common/gbuffer.glsl.h"

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D img_in;
layout(set = 0, binding = 1, scalar) buffer buf_gbuf {
    GBuffer gbuffer[];
};
layout(set = 0, binding = 2) uniform writeonly image2D img_out;

layout(push_constant) uniform PushConstant { 
    vec4 fog;
} pc;

void main() {
    const ivec2 pixel = ivec2(gl_GlobalInvocationID);
    const ivec2 resolution = ivec2(imageSize(img_out));

    if (any(greaterThanEqual(pixel, imageSize(img_out))))
        return;

    const vec3 color_in = texelFetch(img_in, pixel, 0).rgb;
    const GBuffer gbuf = gbuffer[gbuffer_index(pixel, imageSize(img_out))];

    const float mu_t = 0.003 * pc.fog.w;
    const float T = exp(-min(gbuf.linear_z, 1000.0) * mu_t);

    const vec3 color_out = mix(pc.fog.rgb, color_in, T);

    imageStore(img_out, pixel, vec4(color_out, 1));
}
