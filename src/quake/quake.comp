#version 460
#extension GL_GOOGLE_include_directive              : enable
#extension GL_EXT_ray_tracing                       : enable
#extension GL_EXT_ray_query                         : enable
#extension GL_EXT_shader_explicit_arithmetic_types  : enable
#extension GL_EXT_nonuniform_qualifier              : enable

#include "common/camera.glsl"
#include "common/random.glsl"
#include "common/normal_encode.glsl"
#include "common/raytrace.glsl"
#include "common/bsdf_diffuse.glsl"
#include "common/grid.glsl"

#include "config.h"
#include "layout.glsl"
#include "envmap.glsl"
#include "shading.glsl"

// Checks flags and alpha to determine if the intersection should be confirmed.
bool confirm_intersection(const IntersectionInfo info) {
    const VertexExtraData extra_data =  buf_ext[nonuniformEXT(info.instance_id)].v[info.primitive_index];
    const uint alpha = extra_data.texnum_alpha >> 12;
    if ((extra_data.texnum_fb_flags >> 12) != MAT_FLAGS_NONE) {
        // treat sky, lava, slime,... not transparent for now
        return true;
    } else if (alpha != 0) { // 0 means use texture
        return decode_alpha(alpha) >= ALPHA_THRESHOLD;
    } else {
        const vec2 st = unpackHalf2x16(extra_data.st_0) * info.barycentrics.x
                      + unpackHalf2x16(extra_data.st_1) * info.barycentrics.y
                      + unpackHalf2x16(extra_data.st_2) * info.barycentrics.z;

        // We covered the flags above, this surface cannot warp
        // if (flags > 0 && flags < 6) {
        //     warp(st);
        // }

        // const uint texnum = extra_data.texnum_alpha & 0xfff;
        return textureGather(img_tex[nonuniformEXT(extra_data.texnum_alpha & 0xfff)], st, 3).r >= ALPHA_THRESHOLD;
    }
}

// Sets t < 0 if nothing was hit
void trace_ray(const vec3 x0, const vec3 dir, out IntersectionInfo info) {
    rayQueryEXT ray_query;
    rayQueryInitializeEXT(ray_query,
                          tlas,
                          gl_RayFlagsCullBackFacingTrianglesEXT,    // Ray flags, None means: If not set in the instance the triangle
                                                                    // may not be opaque. This is a major performance hit
                                                                    // since we need to load the texture to determine if we want to trace
                                                                    // further.
                                                                    // Use gl_RayFlagsOpaqueEXT to treat all geometry as opaque
                          0xFF,                  // 8-bit instance mask, here saying "trace against all instances"
                          x0,
                          0,                     // Minimum t-value (we set it here to 0 and pull back the ray)
                                                 // such that the ray cannot escape in corners.
                          dir,
                          T_MAX);                // Maximum t-value

    while(rayQueryProceedEXT(ray_query)) {
        // We are only interessted in triangles. "false" means candidates too, not only commited
        if (rayQueryGetIntersectionTypeEXT(ray_query, false) != gl_RayQueryCandidateIntersectionTriangleEXT)
            continue;

        get_intersection_info_uncommited(ray_query, info);
        if (confirm_intersection(info))
            rayQueryConfirmIntersectionEXT(ray_query);
    }

    if(rayQueryGetIntersectionTypeEXT(ray_query, true) == gl_RayQueryCommittedIntersectionTriangleEXT)
        get_intersection_info_commited(ray_query, info);
    else
        info.t = -1;
}

void main() {
    const ivec2 pixel = ivec2(gl_GlobalInvocationID);
    const ivec2 resolution = ivec2(imageSize(img_irradiance));
    if (any(greaterThanEqual(pixel, resolution)))
        return;

    uint rng_state = 9771967 * (pixel.y + resolution.y * pixel.x) + params.frame * resolution.x * resolution.y;
    vec4 irr_samples = vec4(0); // store sample count in `a` for accum node

    ShadingMaterial first_mat;
    const vec3 first_wi = get_camera_ray_dir(pixel, resolution, params.cam_u.xyz, params.cam_w.xyz, radians(90));
    {
        // Find first surface
        IntersectionInfo info;
        trace_ray(params.cam_x.xyz, first_wi, info);
        if (info.t <= 0)
            return; // should not happen in Quake but it does :o
        get_shading_material(info, params.cam_x.xyz, first_wi, first_mat);
    }

    {
        // Write gbuffer
        imageStore(img_gbuf, pixel, vec4(first_mat.normal, distance(params.cam_x.xyz, first_mat.pos)));
    }

    {
        // Store albedo
        vec3 albedo = first_mat.albedo.rgb;
        if (any(greaterThanEqual(first_mat.emission, vec3(1e-3)))) {
            // Required for albedo demodulation
            // Since irradiance is blurred set it to 1 and keep detail in albedo texture
            albedo = first_mat.emission;
            first_mat.emission = vec3(1);
        }
        imageStore(img_albedo, pixel, vec4(albedo, 1));
    }

    {
        // Store motion vector
        const vec3 old_dir = first_mat.pos - params.prev_cam_x.xyz;
        // Should compensate pixel filter..
        const vec2 old_pixel = get_camera_pixel(old_dir, resolution, params.prev_cam_u.xyz, params.prev_cam_w.xyz, radians(90));
        imageStore(img_mv, pixel, vec4(old_pixel - pixel, 0, 0));
    }

    {
        // Evaluate direct light
        if (MAX_PATH_LENGHT > 0)
            irr_samples = vec4(first_mat.emission, 1);
    }

    {
        // Evaluate indirect light
        if (any(greaterThanEqual(first_mat.albedo.rgb, vec3(1e-7))))
        for (int smp = 0; smp < params.spp; smp++) {
            vec3 wi = first_wi;
            ShadingMaterial current_mat = first_mat;
            vec3 current_albedo = vec3(1);
            vec3 f = vec3(0);
            float p_diff = 1;

            for (int segment = 1; segment < MAX_PATH_LENGHT; segment++) {
                const vec3 wo = bsdf_diffuse_sample(current_mat.normal, XorShift32Vec2(rng_state));
                p_diff *= bsdf_diffuse_pdf() * dot(wo, current_mat.normal);

                // ray is below geometric normal surface
                if (dot(wo, current_mat.geo_normal) <= 1e-2)
                    break;

                ShadingMaterial next_mat;
                {
                    IntersectionInfo info;
                    // Pull back the ray such that it cannot excape through corners (and to prevent self collision)
                    trace_ray(current_mat.pos - wi * 1e-3, wo, info);
                    if (info.t <= 0)
                        break;  // should not happen in Quake but it does :o
                    get_shading_material(info, current_mat.pos, wo, next_mat);
                }

                f += (current_albedo * next_mat.emission * bsdf_diffuse_eval()) / p_diff;

                current_albedo *= next_mat.albedo.rgb;
                // we stop if we won't transport any more light or if we found emissive material
                if (all(lessThan(current_albedo, vec3(1e-7))) || any(greaterThan(f, vec3(1e-7))))
                    break;

                wi = wo;
                current_mat = next_mat;
            }

            const vec4 contrib = vec4(f / params.spp, 1);
            if(!any(isinf(contrib)) && !any(isnan(contrib)))
                irr_samples += contrib;
        }
    }

    {
        // Write irradiance
        imageStore(img_irradiance, pixel, irr_samples);
    }
}
