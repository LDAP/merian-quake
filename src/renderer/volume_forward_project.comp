#version 460
#extension GL_GOOGLE_include_directive              : enable
#extension GL_EXT_ray_tracing                       : enable
#extension GL_EXT_ray_query                         : enable
#extension GL_EXT_shader_explicit_arithmetic_types  : enable
#extension GL_EXT_nonuniform_qualifier              : enable
#extension GL_EXT_control_flow_attributes           : enable
#extension GL_KHR_shader_subgroup_ballot            : enable
#extension GL_KHR_shader_subgroup_arithmetic        : enable

#include "common/camera.glsl"

#include "config.h"
#include "layout.glsl"

void main() {
    const ivec2 pixel = ivec2(gl_GlobalInvocationID);
    const ivec2 resolution = ivec2(imageSize(img_irradiance));

    if (any(greaterThan(pixel, resolution))) {
        return;
    }

    {
        // forward project depth for better motion vectors for accumulation and distance markov chain access
        const vec3 prev_wi = get_camera_ray_dir(pixel /*+ prev_pixel_offset_blackman_harris(XorShift32Vec2(rng_state))*/, resolution, params.prev_cam_u.xyz, params.prev_cam_w.xyz, FOV_TAN_ALPHA_HALF);
        const vec3 prev_pos = params.prev_cam_x.xyz + prev_wi * texelFetch(img_prev_volume_depth, pixel, 0).r;
        const ivec2 new_pixel = ivec2(round(get_camera_pixel(prev_pos - params.cam_x.xyz, resolution, params.cam_u.xyz, params.cam_w.xyz, FOV_TAN_ALPHA_HALF)));
        
        // overwrite mv that are written in quake.comp
        if (all(lessThan(new_pixel, imageSize(img_volume_mv))) && all(greaterThanEqual(new_pixel, vec2(0)))) {
            imageStore(img_volume_mv, new_pixel, vec4(pixel - new_pixel, 0, 0));
        }
    }
}
