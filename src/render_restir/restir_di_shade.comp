#version 460
#extension GL_GOOGLE_include_directive : enable

#include "layout.glsl"
#include "../raytrace.glsl"
#include "restir_di.glsl"

#include "merian-shaders/hash.glsl"
#include "merian-shaders/random.glsl"
#include "merian-shaders/bsdf_diffuse.glsl"
#include "merian-shaders/bsdf_microfacet.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/color/colors_yuv.glsl"

#define pixel ivec2(gl_GlobalInvocationID)
#define resolution ivec2(imageSize(img_irradiance))
#define first_hit hits[gbuffer_index(pixel, resolution)]
#define read_reservoir(pixel) reservoirs[gbuffer_index((pixel), resolution)]
#define write_reservoir reservoirs[gbuffer_index((pixel), resolution)]

void main() {
    if (any(greaterThanEqual(pixel, resolution))) {
        return;
    }

    uint rng_state = pcg4d16(uvec4(pixel, params.frame, SEED));

    ReSTIRDIReservoir reservoir = read_reservoir(pixel);;

    Hit next_hit;
    const vec3 wo = normalize(reservoir.y - first_hit.pos);
    const float wodotn = dot(wo, first_hit.normal);
    next_hit.wi = wo;
    next_hit.pos = first_hit.pos - first_hit.wi * 1e-3;
    f16vec3 incident = f16vec3(0); // contains throughput already
    f16vec3 throughput = f16vec3(1);
    trace_ray(throughput, incident, next_hit);

    const f16vec3 microfacet_bsdf = f16vec3(bsdf_microfacet_eval(-first_hit.wi, make_frame(first_hit.normal), wo, vec2(first_hit.roughness)) * wodotn);
    const float W = restir_di_reservoir_W(reservoir);
    
    const vec3 irr = !isnan(W) && !isinf(W) ? (microfacet_bsdf * incident) * W : vec3(0);
    const float l = yuv_luminance(irr);

    imageStore(img_irradiance, pixel, vec4(irr, 0));
    imageStore(img_moments, pixel, vec4(l, l * l, 0, 0));
}
