#version 460
#extension GL_GOOGLE_include_directive : enable

#include "layout.glsl"
#include "../raytrace.glsl"
#include "restir_di.glsl"

#include "merian-shaders/hash.glsl"
#include "merian-shaders/random.glsl"
#include "merian-shaders/bsdf_diffuse.glsl"
#include "merian-shaders/bsdf_microfacet.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/color/colors_yuv.glsl"

#define pixel ivec2(gl_GlobalInvocationID)
#define resolution ivec2(imageSize(img_irradiance))
#define first_hit hits[gbuffer_index(pixel, resolution)]

#define write_reservoir reservoirs[gbuffer_index((pixel), resolution)]

void main() {
    if (any(greaterThanEqual(pixel, resolution))) {
        return;
    }

    uint rng_state = pcg4d16(uvec4(pixel, params.frame * 4 + 0, SEED));

    ReSTIRDIReservoir reservoir = restir_di_reservoir_init();

    if (any(greaterThanEqual(first_hit.albedo, f16vec3(1e-7))))
    for (int s = 0; s < MAX_SPP; s++) {
        Hit current_hit = first_hit;

        const vec3 wo = bsdf_diffuse_sample(current_hit.normal, XorShift32Vec2(rng_state));
        const float wodotn = dot(wo, current_hit.normal);
        if (dot(wo, geo_decode_normal(current_hit.enc_geonormal)) <= 1e-3 || wodotn <= 1e-3)
            break;

        Hit next_hit;
        next_hit.wi = wo;
        next_hit.pos = current_hit.pos - current_hit.wi * 1e-3;
        f16vec3 incident = f16vec3(0); // contains throughput already
        f16vec3 throughput = f16vec3(1);
        trace_ray(throughput, incident, next_hit);

        const f16vec3 microfacet_bsdf = f16vec3(bsdf_microfacet_eval(-current_hit.wi, make_frame(current_hit.normal), wo, vec2(current_hit.roughness)) * wodotn);
        restir_di_reservoir_add_sample(reservoir, rng_state, next_hit.pos, bsdf_diffuse_pdf(wodotn), yuv_luminance_f16(microfacet_bsdf * incident));
    }

    write_reservoir = reservoir;
}
