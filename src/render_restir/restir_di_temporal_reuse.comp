#version 460
#extension GL_GOOGLE_include_directive : enable

#include "layout.glsl"
#include "../raytrace.glsl"
#include "restir_di.glsl"

#include "merian-shaders/hash.glsl"
#include "merian-shaders/random.glsl"
#include "merian-shaders/bsdf_diffuse.glsl"
#include "merian-shaders/bsdf_microfacet.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/color/colors_yuv.glsl"

#define pixel ivec2(gl_GlobalInvocationID)
#define resolution ivec2(imageSize(img_irradiance))
#define first_hit hits[gbuffer_index(pixel, resolution)]
#define read_reservoir(pixel) reservoirs[gbuffer_index((pixel), resolution)]
#define read_prev_reservoir(pixel) prev_reservoirs[gbuffer_index((pixel), resolution)]
#define write_reservoir reservoirs[gbuffer_index((pixel), resolution)]

void main() {
    if (any(greaterThanEqual(pixel, resolution))) {
        return;
    }

    uint rng_state = pcg4d16(uvec4(pixel, params.frame, SEED));

    ReSTIRDIReservoir reservoir = read_reservoir(pixel);

    ivec2 prev_pixel = ivec2(round(pixel + texelFetch(img_mv, pixel, 0).rg));
    if (all(lessThan(prev_pixel, resolution)) && all(greaterThanEqual(prev_pixel, ivec2(0)))) {
        restir_di_reservoir_combine(reservoir, rng_state, read_prev_reservoir(prev_pixel), read_prev_reservoir(prev_pixel).p_target);
    }

    write_reservoir = reservoir;
}
