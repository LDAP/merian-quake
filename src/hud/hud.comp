#version 460
#extension GL_GOOGLE_include_directive  : enable
#extension GL_EXT_scalar_block_layout   : require

#include "common/gbuffer.glsl.h"

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D img_in;

layout(set = 0, binding = 1, scalar) buffer restrict readonly buf_gbuf {
    GBuffer gbuffer[];
};

layout(set = 0, binding = 2) uniform writeonly restrict image2D img_out;


layout(push_constant) uniform PushConstant { 
    vec4 blend;
    float armor;
    float health;
    int effect;
} pc;

void main() {
    const ivec2 pixel = ivec2(gl_GlobalInvocationID);
    const ivec2 resolution = ivec2(imageSize(img_out));

    if (any(greaterThanEqual(pixel, imageSize(img_out))))
        return;

    vec3 color = texelFetch(img_in, pixel, 0).rgb;

    if (pixel.y > imageSize(img_out).y * 0.96 && pixel.x > imageSize(img_out).x * 0.8) {
        // simple health + armor indicators
        float val = 0.0;
        vec3 col;
        if (pixel.y > imageSize(img_out).y * 0.98) {
            val = pc.health;
            col = vec3(1, 0, 0);
        } else {
            val = pc.armor;
            col = vec3(0, 1, 1);
        }
        const float off = (pixel.x / float(imageSize(img_out).x) - 0.8) / 0.1;
        if (off * 100 < val) {
            color = mix(color, col, 0.8);
        }
    }

    if (pc.health > 0 && distance(pixel, imageSize(img_out) / vec2(2)) < .004 * imageSize(img_out).x) {
        color = any(lessThan(abs(vec2(pixel) - imageSize(img_out).rg / vec2(2)), vec2(1))) ? vec3(.9, .9, .9) : color;
    }

    color = mix(color, pc.blend.rgb, pc.blend.a);

    if (pc.effect > 0) {
        const float z = gbuffer[gbuffer_index(pixel, imageSize(img_out))].linear_z;
        float mu_t;
        vec3 mixcolor;

        switch (pc.effect) {
            // from view.c cshift_*
            case 1: {mixcolor = vec3(130, 80, 50) / 255.;  mu_t = 0.001; break;}
            case 2: {mixcolor = vec3(255,80,0) / 255.;     mu_t = 0.02; break;}
            case 3: {mixcolor = vec3(0,25,5) / 255.;       mu_t = 0.02; break;}
        }

        const float T = exp(-min(z, 1000.0) * mu_t);
        color = mix(mixcolor, color, T);
    }

    imageStore(img_out, pixel, vec4(color, 1));
}
