#version 460
#extension GL_GOOGLE_include_directive              : enable
#extension GL_EXT_ray_tracing                       : enable
#extension GL_EXT_ray_query                         : enable
#extension GL_EXT_ray_tracing_position_fetch        : enable
#extension GL_EXT_shader_explicit_arithmetic_types  : enable
#extension GL_EXT_nonuniform_qualifier              : enable
#extension GL_EXT_control_flow_attributes           : enable
#extension GL_KHR_shader_subgroup_ballot            : enable
#extension GL_KHR_shader_subgroup_arithmetic        : enable

#include "merian-shaders/camera.glsl"
#include "merian-shaders/random.glsl"
#include "merian-shaders/normal_encode.glsl"
#include "merian-shaders/raytrace.glsl"
#include "merian-shaders/bsdf_diffuse.glsl"
#include "merian-shaders/grid.glsl"
#include "merian-shaders/color/colors_yuv.glsl"
#include "merian-shaders/hash.glsl"
#include "merian-shaders/bsdf_ggx.glsl"
#include "merian-shaders/bsdf_microfacet.glsl"

uint rng_state;
vec2 moments;
vec4 irr;

#include "../config.h"
#include "layout.glsl"
#include "light_cache.glsl"
#include "mc.glsl"
#include "../raytrace.glsl"

#define pixel ivec2(gl_GlobalInvocationID)
#define resolution ivec2(imageSize(img_irradiance))
#define first_hit hits[gbuffer_index(pixel, resolution)]

void main() {
    rng_state = pcg4d16(uvec4(pixel, params.frame, SEED));
    moments = vec2(0);
    irr = vec4(0);

    if (any(greaterThanEqual(first_hit.albedo, f16vec3(1e-7))))
    for (int s = 0; s < MAX_SPP; s++) {
        Hit current_hit = first_hit;

        // Camera throughput encoded in albedo
        vec3 current_throughput = vec3(1);
        vec3 f = vec3(0);
        float p = 1.0;

        for (int segment = 1; segment < MAX_PATH_LENGTH; segment++) {
            vec3 wo;
            float wodotn;
            float wo_p = 0;

            MCState mc_state;
            uint mc_buffer_index;

            // SAMPLE NEXT OUTGOING DIRECTION
            float score_sum = 0;
            {
                float scores[MC_SAMPLES];
                vec4 vmfs[MC_SAMPLES];
                {
                    [[unroll]]
                    for (int i = 0; i < MC_SAMPLES; i++) {
                        const bool adaptive_grid = XorShift32(rng_state) < MC_SAMPLES_ADAPTIVE_PROB;
                        
                        uint buffer_index, hash;
                        if (adaptive_grid) {
                            mc_adaptive_buffer_index(s == 0 ? current_hit.prev_pos : current_hit.pos, current_hit.normal, buffer_index, hash);
                        } else {
                            mc_static_buffer_index(s == 0 ? current_hit.prev_pos : current_hit.pos, buffer_index, hash);
                        }

                        MCState state = mc_states[buffer_index];

                        if (adaptive_grid) {
                            mc_adaptive_finalize_load(state, hash);
                        } else {
                            mc_static_finalize_load(state, hash, s == 0 ? current_hit.prev_pos : current_hit.pos, current_hit.normal);
                        }

                        scores[i] = state.sum_w;
                        score_sum += scores[i];
                        vmfs[i] = mc_state_get_vmf(state, current_hit.pos);
                        if (XorShift32(rng_state) < scores[i] / score_sum) {
                            // we use here that comparison with NaN is false, that happens if candidate_score == 0 and sum == 0; 
                            mc_state = state;
                            mc_buffer_index = buffer_index;
                            wo = vmf_sample(vmfs[i].xyz, vmfs[i].w, XorShift32Vec2(rng_state));
                        }
                    }
                }

                if (XorShift32(rng_state) < SURF_BSDF_P || score_sum == 0) {
                    // BSDF Sampling
                    wo = bsdf_ggx_diffuse_mix_sample(-current_hit.wi, current_hit.normal, current_hit.roughness, XorShift32Vec3(rng_state));
                    mc_state = mc_state_new(current_hit.pos, current_hit.normal);
                } // else {VMF Sampling // wo = set above }
                wodotn = dot(wo, current_hit.normal);
                if (mc_state.N < 25) {
                    p = 0;
                }

                // ray is below geometric surface
                if (wodotn <= 1e-3 || dot(wo, geo_decode_normal(current_hit.enc_geonormal)) <= 1e-3)
                    break;

                // Multiple importance sampling
                [[unroll]]
                for (int i = 0; i < MC_SAMPLES; i++) {
                    // score_sum > 0 ? results in black artifacts
                    wo_p += (scores[i] > 0 ? scores[i] * (vmf_pdf(vmfs[i].w, dot(wo, vmfs[i].xyz))) / score_sum : 0);
                }
                wo_p = (score_sum > 0 ? SURF_BSDF_P : 1.0) * bsdf_ggx_diffuse_mix_pdf(-current_hit.wi, wo, current_hit.normal, current_hit.roughness) + (1 - SURF_BSDF_P) * wo_p;

            }

            // TRACE RAY TO NEXT SURFACE
            Hit next_hit;
            next_hit.wi = wo;
            // Pull back the ray such that it cannot excape through corners (and to prevent self collision)
            next_hit.pos = current_hit.pos - current_hit.wi * 1e-3;
            f16vec3 incident = f16vec3(0); // contains throughput already
            f16vec3 throughput = f16vec3(1);
            trace_ray(throughput, incident, next_hit);
            // Full GI (infinite diffuse bounces)
            const f16vec3 lc_incident = any(greaterThan(incident, f16vec3(0))) || (!USE_LIGHT_CACHE_TAIL && MAX_PATH_LENGTH == 2) ? incident : throughput * light_cache_get(next_hit.pos, next_hit.normal).rgb;

            // EVALUATE BSDF
            // without albedo (added below to skip first albedo)
            const float microfacet_bsdf = bsdf_ggx_diffuse_mix_times_wodotn(-current_hit.wi, wo, current_hit.normal, current_hit.roughness, 0.02);
            
            current_throughput *= microfacet_bsdf;
            if (USE_LIGHT_CACHE_TAIL) {
                f = current_throughput * (segment < MAX_PATH_LENGTH - 1 ? incident : lc_incident);
            } else {
                f = current_throughput * incident;
            }
            p *= wo_p;
            current_throughput *= throughput;

            // UPDATE MARKOV CHAIN and LIGHT_CACHE
            {
                // multiply albedo?
                const float mc_f = yuv_luminance(lc_incident * microfacet_bsdf / wo_p);
                if (!isinf(mc_f) && !isnan(mc_f)) {
                    light_cache_update(current_hit.pos, current_hit.normal, lc_incident * bsdf_diffuse_eval(current_hit.albedo) * wodotn / max(wo_p, 10));

                    if (XorShift32(rng_state) * score_sum < mc_f * MC_SAMPLES) {
                        // == XorShift32(rng_state) < mc_f / (score_sum / MC_SAMPLES)
                        mc_state_add_sample(mc_state, current_hit.pos, mc_f, next_hit.pos, (next_hit.pos - next_hit.prev_pos) / TIME_DIFF);
                        mc_static_save(mc_state, current_hit.pos, current_hit.normal);
                        mc_adaptive_save(mc_state, current_hit.pos, current_hit.normal);
                    } else if (MC_FAST_RECOVERY && mc_f < 1e-5 * mc_state.sum_w && dot(wo, mc_state_dir(mc_state, current_hit.pos)) > mc_state_mean_cos(mc_state, current_hit.pos)) {
                        // fix slow recovery after light source disappears
                        mc_states[mc_buffer_index] = mc_state_new(current_hit.pos, current_hit.normal);
                    }
                }
            }

            // PREPARE NEXT ITERATION
            {
                current_throughput *= next_hit.albedo;
                current_hit = next_hit;

                // we stop if we won't transport any more light or if we found emissive material
                if (all(lessThan(current_throughput, vec3(1e-7))) || any(greaterThan(f, vec3(1e-7))))
                    break;
            }
        }

        const vec3 contrib = f / p;
        if(!any(isinf(contrib)) && !any(isnan(contrib))) {
            irr += vec4(contrib, 1);
            const float l = yuv_luminance(contrib);
            moments += vec2(l, l * l);
        }
    }

    if (any(greaterThanEqual(pixel, resolution))) {
        return;
    }

    if (irr.a > 0) {
        irr.rgb /= irr.a;
        moments /= irr.a;
    }

    imageStore(img_irradiance, pixel, irr);
    imageStore(img_moments, pixel, vec4(moments, 0, 0));


    if (DEBUG_OUTPUT_CONNECTED) {
        switch(DEBUG_OUTPUT_SELECTOR) {
            case 0: {
                // -- show light cache -- 
                imageStore(img_debug, pixel, vec4(light_cache_get(first_hit.pos, first_hit.normal) * vec3(5), 1));
                break;
            }
            case 1: {
                // -- MC learned irradiance --
                MCState mc_state;
                mc_adaptive_load(mc_state, first_hit.pos, first_hit.normal);
                imageStore(img_debug, pixel, vec4(vec3(mc_state.sum_w * 0.1), 1));
                break;
            }
            case 2: {
                // -- MC learned directions --
                MCState mc_state;
                mc_adaptive_load(mc_state, first_hit.pos, first_hit.normal);
                imageStore(img_debug, pixel, vec4(vec3(mc_state_get_vmf(mc_state, first_hit.pos)), 1));
                break;
            }
            case 3: {
                // -- MC grid --
                const uint level = clamp(mc_adaptive_level_for_pos(first_hit.pos), 0, MC_ADAPTIVE_GRID_LEVELS - 1);
                uint seed = hash_grid(mc_adpative_grid_idx_for_level_closest(level, first_hit.pos), 256 * 256 * 256);
                imageStore(img_debug, pixel, vec4(vec3(XorShift32Vec4(seed)), 1));
                break;
            }
            case 4: {
                // -- irradiance --
                imageStore(img_debug, pixel, vec4(irr.rgb, 1));
                break;
            }
            case 5: {
                // -- moments --
                imageStore(img_debug, pixel, vec4(moments, 0, 1));
                break;
            }
        }
    }
}
